template <class Type>
void pre_order(bin_tree_node<Type>*& node_ptr)
{
	// Precondition: node_ptr is of type bin_tree_node<Type>*&
	// Postcondition: The data in the nodes of the binary tree are printed using
	// preorder traversal
	
	if(node_ptr == nullptr)
		return;
	
	std::cout << "---->" << node_ptr->get_key();
	pre_order(node_ptr->get_left());
	pre_order(node_ptr->get_right());
}

template <class Type>
void inorder(bin_tree_node<Type>*& node_ptr)
{
	// Precondition: node_ptr is of type bin_tree_node<Type>*&
	// Postcondition: The data in the nodes of the binary tree are printed using
	// inorder traversal
	
	if(node_ptr == nullptr)
		return;
	
	inorder(node_ptr->get_left());
	if(node_ptr != nullptr)
		std::cout << "---->" << node_ptr->get_data(); 
	inorder(node_ptr->get_right());
}

template <class Type>
void tree_clear(bin_tree_node<Type>*& root){
	// Precondition: root is of type bin_tree_node<Type>*&
	// Postcondition: Each node of the binary tree is cleared

	bin_tree_node<Type>* child;
	
	if(root != nullptr)
	{
		child = root->get_left();
		tree_clear(child);
		child = root->get_right();
		tree_clear(child);
		delete root;
		root = nullptr;
	}
}

template <class Type>
bin_tree_node<Type>* bst_insert(bin_tree_node<Type>*& root, const Type& entry, const int& key_val){
	// Precondition: root is of type bin_tree_node<Type>*&, entry is of type const Type& and key_val is of type const int&
	// Postcondition: A new node is inserted into the tree and new_node is returned
	
	bin_tree_node<Type>* new_node = root;
	
	if(new_node == nullptr)
	{
		new_node = new bin_tree_node<Type>(entry, nullptr, nullptr, key_val, nullptr);
	}
	
	if(key_val == new_node->get_key()){
		new_node->set_data(entry);
	}
	else if(key_val < new_node->get_key())
	{
		new_node->set_left(bst_insert(new_node->get_left(), entry, key_val));
	}
	else if(key_val > new_node->get_key()){
		new_node->set_right(bst_insert(new_node->get_right(), entry, key_val));
	}

	return new_node;
}

template <class Type>
bin_tree_node<Type>* bst_min(bin_tree_node<Type>*& root){
	// Precondition: root is of type bin_tree_node<Type>*&
	// Postcondition: Return the smallest value in the right subtree
	
	bin_tree_node<Type>* new_root;
	if(root->get_left() == nullptr)
		return root;
	else
	{
		new_root = bst_min(root->get_left());
		return new_root;
	}
}

template <class Type>
bin_tree_node<Type>*& bst_remove(bin_tree_node<Type>*& root, int key_val){
	// Precondition: root is of type bin_tree_node<Type>*& and key_val is of type int
	// Postcondition: The desired node with the specific key_val is removed from the tree

	bin_tree_node<Type>* new_root;
	if(root == nullptr)
		return root;
		
	else if(root->get_key() < key_val)
		root->set_right(bst_remove(root->get_right(), key_val));
		
	else if(root->get_key() > key_val)
		root->set_left(bst_remove(root->get_left(), key_val));
		
	else
	{
		if(root->get_left() == nullptr && root->get_right() == nullptr){
			delete root;
			root = nullptr;
		}
		else if(root->get_left() == nullptr){
			new_root = root;
			root = root->get_right();
			delete new_root;
		}
		else if (root->get_right() == nullptr){
			new_root = root;
			root = root->get_left();
			delete new_root;
		}
		else{
			new_root = bst_min(root->get_right());
			root->set_key(new_root->get_key());
			root->set_right(bst_remove(root->get_right(), new_root->get_key()));
		}
	}
	return root;
}
